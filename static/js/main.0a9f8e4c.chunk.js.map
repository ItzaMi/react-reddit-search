{"version":3,"sources":["images/greyThumbnail.jpg","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledCard","styled","div","ImageWrapper","props","image","ContentWrapper","Title","p","Time","Link","a","Author","Card","post","thumbnail","greyThumbnail","date","Date","created_utc","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","href","url","target","rel","title","author","Wrapper","SubWrapper","PostsContainer","History","h1","SearchBox","input","SearchButton","button","App","useState","posts","setPosts","inputValue","setValue","subreddit","setSubreddit","bundle","setBundle","backOnHistory","e","console","log","innerText","useEffect","timeout","setTimeout","axios","get","then","res","data","children","map","obj","clearTimeout","type","value","onChange","onClick","key","id","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a9f8e4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/greyThumbnail.0e99eb52.jpg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport greyThumbnail from \"../images/greyThumbnail.jpg\";\r\n\r\nconst StyledCard = styled.div`\r\n  padding: 10px;\r\n  background-color: #f9f9f9;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  height: 100px;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  background-image: url('${(props) => props.image}');\r\n  height: 100%;\r\n  width: 150px;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  height: 100%;\r\n  padding-left: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nconst Title = styled.p`\r\n  font-weight: bold;\r\n  margin: 0px;\r\n`;\r\n\r\nconst Time = styled.p`\r\n  font-size: 10px;\r\n  margin: 0px;\r\n`;\r\n\r\nconst Link = styled.a`\r\n  text-decoration: none;\r\n  color: #000000;\r\n\r\n  &:hover ${Title} {\r\n    color: #ff4500;\r\n  }\r\n`;\r\n\r\nconst Author = styled.a`\r\n  text-decoration: none;\r\n  color: #000000;\r\n  margin: 0px;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nfunction Card({ post }) {\r\n  if (post.thumbnail === \"self\" || null || post.thumbnail === \"default\") {\r\n    post.thumbnail = greyThumbnail;\r\n  }\r\n\r\n  let date = new Date(post.created_utc * 1000);\r\n  let day = date.getDate();\r\n  let month = date.getMonth();\r\n  let year = date.getFullYear();\r\n  let hours = date.getHours();\r\n  let minutes = \"0\" + date.getMinutes();\r\n  let seconds = \"0\" + date.getSeconds();\r\n  let formattedTime =\r\n    day +\r\n    \"/\" +\r\n    month +\r\n    \"/\" +\r\n    year +\r\n    \" | \" +\r\n    hours +\r\n    \":\" +\r\n    minutes.substr(-2) +\r\n    \":\" +\r\n    seconds.substr(-2);\r\n\r\n  return (\r\n    <StyledCard>\r\n      <ImageWrapper image={post.thumbnail} />\r\n      <ContentWrapper>\r\n        <Link href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <Title>{post.title}</Title>\r\n        </Link>\r\n        <Author\r\n          href={`https://reddit.com/user/${post.author}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {post.author}\r\n        </Author>\r\n        <Time>{formattedTime}</Time>\r\n      </ContentWrapper>\r\n    </StyledCard>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\nimport Card from \"./components/Card\";\n\nconst Wrapper = styled.div`\n  margin: 30px;\n`;\n\nconst SubWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst PostsContainer = styled.div`\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst History = styled.div`\n  width: 20%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 20px;\n\n  h1 {\n    margin: 0px;\n  }\n`;\n\nconst Title = styled.h1`\n  color: #ff4500;\n`;\n\nconst SearchBox = styled.input`\n  max-width: 300px;\n`;\n\nconst SearchButton = styled.button`\n  max-width: 300px;\n  margin-bottom: 30px;\n`;\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [inputValue, setValue] = useState(\"all\");\n  const [subreddit, setSubreddit] = useState(\"all\");\n  const [bundle, setBundle] = useState([]);\n\n  const handleSearchInputChanges = (e) => {\n    setValue(e.target.value);\n  };\n\n  const callSearchFunction = () => {\n    setSubreddit(inputValue);\n    setBundle([...bundle, subreddit]);\n  };\n\n  const backOnHistory = (e) => {\n    console.log(e.target.innerText);\n    setSubreddit(e.target.innerText);\n    setBundle([...bundle, subreddit]);\n  };\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      axios.get(`https://www.reddit.com/r/${subreddit}.json`).then((res) => {\n        const posts = res.data.data.children.map((obj) => obj.data);\n        setPosts(posts);\n      });\n    }, 500);\n\n    return () => clearTimeout(timeout);\n  }, [inputValue, setPosts, subreddit]);\n\n  return (\n    <Wrapper>\n      <Title>Reddit Search</Title>\n      <SearchBox\n        type=\"text\"\n        value={inputValue}\n        onChange={handleSearchInputChanges}\n      />\n      <SearchButton type=\"submit\" onClick={callSearchFunction}>\n        SEARCH\n      </SearchButton>\n      <SubWrapper>\n        <PostsContainer>\n          {posts.map((post) => {\n            return <Card key={post.id} post={post} />;\n          })}\n        </PostsContainer>\n        <History>\n          <h1>History</h1>\n          {bundle.map((item) => {\n            return <p onClick={backOnHistory}>{item}</p>;\n          })}\n        </History>\n      </SubWrapper>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}